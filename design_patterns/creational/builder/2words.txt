The Builder pattern helps us construct complex objects without directly
instantiating their struct, or writing the logic they require. Imagine an object that could have
dozens of fields that are more complex structs themselves. Now imagine that you have
many objects with these characteristics, and you could have more. We don't want to write
the logic to create all these objects in the package that just needs to use the objects.

Instance creation can be as simple as providing the opening and closing braces {} and
leaving the instance with zero values, or as complex as an object that needs to make some
API calls, check states, and create objects for its fields. You could also have an object that is
composed of many objects, something that's really idiomatic in Go, as it doesn't support
inheritance.

A Builder design pattern tries to:
    - Abstract complex creations so that object creation is separated from the object user
    - Create an object step by step by filling its fields and creating the embedded objects
    - Reuse the object creation algorithm between many objects

Example - vehicle manufacturing
    The Builder design pattern has been commonly described as the relationship between a
    director, a few Builders, and the product they build. Continuing with our example of the
    car, we'll create a vehicle Builder. The process (widely described as the algorithm) of
    creating a vehicle (the product) is more or less the same for every kind of vehicle--choose
    vehicle type, assemble the structure, place the wheels, and place the seats. If you think
    about it, you could build a car and a motorbike (two Builders) with this description, so we
    are reusing the description to create cars in manufacturing. The director is represented by
    the ManufacturingDirector type in our example.